from pydantic import BaseModel, Field, field_validator
from typing import List, Dict, Any, Union

# Import our custom validator functions
from . import validators

# --- Base and Error Models ---

class ErrorResponse(BaseModel):
    """A standardized error response model."""
    detail: str

# --- Dataset Models ---

class UploadSuccessResponse(BaseModel):
    """Response model for a successful file upload."""
    datasetId: str = Field(..., description="The unique identifier for the uploaded dataset.")
    filename: str = Field(..., description="The original name of the uploaded file.")

# --- Analysis and Chart Models ---

class SuggestionParameters(BaseModel):
    """
    Defines the parameters required to generate a specific chart.
    This model is part of the `SuggestionDTO` and is also used as the basis
    for the `ChartParams` request.
    """
    chart_type: str = Field(..., description="The type of chart to generate (e.g., 'bar', 'line').")
    x_axis: str = Field(..., description="The column to be used for the x-axis.")
    y_axis: str = Field(..., description="The column to be used for the y-axis.")
    aggregation: str = Field(..., description="The aggregation function to apply (e.g., 'sum', 'mean').")

    # Apply the custom validators to the fields
    _validate_chart_type = field_validator('chart_type')(validators.validate_chart_type)
    _validate_aggregation = field_validator('aggregation')(validators.validate_aggregation_type)


class SuggestionDTO(BaseModel):
    """
    Represents a single chart suggestion generated by the AI.
    """
    title: str = Field(..., description="A descriptive title for the suggested chart.")
    insight: str = Field(..., description="A brief, AI-generated analysis of what the chart reveals.")
    parameters: SuggestionParameters


class SuggestionRequest(BaseModel):
    """Request model for getting suggestions for a dataset."""
    datasetId: str


class ChartParams(SuggestionParameters):
    """
    Request model for generating chart data. Inherits all fields and validators
    from `SuggestionParameters`.
    """
    datasetId: str


class ChartDataResponse(BaseModel):
    """
    Response model containing the data series for rendering a chart.
    The format is a list of dictionaries, which is easy for most charting
    libraries to consume.
    """
    series: List[Dict[str, Any]] = Field(..., description="The data points for the chart series.")